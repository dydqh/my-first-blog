기존 디렉토리를 Git 저장소로 만들기 :	cd /c/user/my_project
.git이라는 하위 디렉토리를 만들기 :		git init
git저장소 만들기 , 파일을 새로 추적하기 : 	git add ~
파일 버전 관리 시작 : 			git commit -m '~'
기존 저장소 Clone하기 : 			git clone https://~
리모트 저장소 확인 :			git remote (URL보기 : git remote -v)
파일의 상태 확인하기 :			git status
파일의 상태 짤막하게 확인하기 : 		git status -s / git status --short  (미추적 ?? / Staged 새로생성 A / 수정 M)
관리할 필요가 없는 파일 무시 : 		.gitignore 파일 안에 파일 패턴 적기
					*.[oa] : 확장자가 ".o"나 ".a"인 파일을 Git이 무시
					*~ : ~로 끝나는 모든 파일을 무시
					'#'로 시작하는 라인은 무시 / /로 시작하면 하위 디렉토리에 적용되지 않는다. /
					'!'로 시작하는 패턴의 파일은 무시하지 않는다. / 디렉토리는 /를 끝에 사용하는 것으로 표현
					Glob패턴 : 애스터리스크(*)는 문자가 하나도 없거나 하나 이상을 의미 / [abc]는 중괄호 안에
						있는 문자 중 하나를 의미 / [0-9]는 그 캐릭터 사이에 있는 문자 하나를 의미
파일의 상태 자세히 확인하기 :	 	git diff
Staged 상태의 파일 커밋하기 :		git commit (실행하기 전에 git status를 통해 Staged 상태인지 확인하기)
(어떤 편집기 사용할 지) : 			git config --global core.editor
git add + git commit : 			git commit -a -m "~"
Git 파일 제거 (Staged 상태로 만들기) : 	git rm ~
Git 파일 강제로 제거 :			git rm -f ~
Git 파일 Untracked 파일로 만들기 : 		git rm --cached ~
Git 이름 바꾸기 :				git mv 원래~ 바꿀~

Git 커밋 목록 시간순으로 보기 : 		git log
커밋의 통계 정보조회, 수정된 파일의 통계 : 		--stat
시간순으로 가까운 두개만 보기 : 			-2
명시한 날짜 이후의 커밋만 검색 : 			--since, --after
명시한 날짜 이전의 커밋만 검색 : 			--until, --before
입력한 저자의 커밋만 검색 : 			--author
입력한 커미터의 커밋만 검색 : 			--committer
커밋 메시지 안의 텍스트 검색 : 			--grep
커밋 변경 내용 안의 텍스트 검색 : 			-S
diff로 자세히 볼때, 각 커밋에 적용된 패치 :		-p
stat중 수정한 파일, 추가된 라인, 삭제된 라인 :		--shortstat
이름만 :						--name-only
수정된 파일 목록, 추가/수정/삭제여부 : 		--name-status
40자 짜리 SHA-1 체크섬을 처음 몇 자만 : 		--abbrev-commit
“2 weeks ago” 처럼 상대적인 시간형식 : 		--relative-date
브랜치와 머지 히스토리 아스키 그래프 출력 :		--graph
내 포맷으로 결과 출력할 때 : 		git log 	--pretty=format:"%h - %an, %ar : %s"
					%H - 커밋 해시 / %h - 짧은 길이 커밋 해시 / %T - 트리 해시 / %t - 짧은 길이 트리 해시 / 
					%P - 부모 해시 / %p - 짧은 길이 부모 해시 / %an - 저자 이름 / %ae - 저자 메일 /
					%ad - 저자 시각 (형식은 –-date=옵션 참고) / %ar - 저자 상대적 시각 / %cn - 커미터 이름 /
					%ce - 커미터 메일 / %cd - 커미터 시각 / %cr - 커미터 상대적 시각 / %s - 요약

그만하기					q
커밋하고 덮어쓰기 : 			git commit --amend
스테이지 상태 벗어나기, 모디파이 취소하기 : 	git restore ~
리모트 저장소에서 데이터 가져오기 : 		git fetch <remote>
리모트 저장소에 push하기 :			git push origin(리모트 저장소 이름) master(브랜치 이름)
리모트 저장소 살펴보기 : 			git remote show origin
리모트 저장소 이름 바꾸기 : 		git remote rename pb paul



워킹 디렉토리의 모든 파일은 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다.
Tracked파일은 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록) 상태 중 하나이다.

Untracked파일 - 워킹 디렉토리에 있는 파일 중 스냅샷에도, Staging Area에도 포함되지 않은 파일

>처음 저장소를 Clone > 모든 파일은 Tracked이면서 Unmodified 상태
>어떤 파일 수정 > Git은 그 파일을 Modified 상태로 인식
> Staged 상태로 만든다 > Staged 상태의 파일을 커밋

파일을 새로 만들면 Git은 그 파일을 Untracked 파일로 인식한다. 파일을 Tracked 상태로 바꾸기 전까지 Git은 절대 그 파일을
커밋하지 않기 때문에, 일하면서 생성하는 바이너리 파일같은 것을 커밋하는 실수는 하지 않게 된다.
git add 명령어를 통해 새로 생성한 파일을 Tracked 상태로 변환시켜 Staged 상태(Changes to be committed)로 만든다.
git add 명령을 파일 또는 디렉토리의 경로를 아규먼트로 받으며, 디렉토리의 경우 아래에 있는 모든 파일들까지 재귀적으로 추가한다.

Tracked 상태이지만 Staged 가 아닌 상태(Changes not staged for commit) 에서 git add를 통해 Staged 상태로 만든다.
Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 git add를 사용한다.
add의 의미는 파일을 추가한다기 보다는 다음 커밋에 추가한다고 받아들이는게 좋다.

git commit 명령을 통해 커밋되는 파일은 마지막으로 git add 명령을 실행했을 때의 버전이 커밋된다.
따라서 git add 후에 파일을 재수정하면 다시 git add명령을 수행하여 최신 버전을 Staged 상태로 만들어야 한다.

